{"version":3,"sources":["components/SeparatorMenu.js","components/HeaderMenu.js","utils/jsonToMarkdown.js","components/Panel.js","pages/HomePage.js","pages/ActuPage.js","pages/CVPage.js","pages/ProjectsPage.js","App.js","serviceWorker.js","index.js"],"names":["SeparatorMenu","react_default","a","createElement","className","React","Component","HeaderMenu","href","SeparatorMenu_SeparatorMenu","jsonToMarkdown","array","join","Panel","this","props","title","children","HomePage","Panel_Panel","index","react_markdown_default","source","text","ActuPage","CVPage","ProjectsPage","App","react_router_dom","HeaderMenu_HeaderMenu","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fc8bbb9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class SeparatorMenu extends React.Component {\r\n    render() {\r\n       return <div className=\"col-1 separator\">-</div>\r\n    }\r\n}","import React from 'react'\r\nimport SeparatorMenu from './SeparatorMenu';\r\n\r\nexport default class HeaderMenu extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <header className=\"row\">\r\n            <div className=\"col-1\"></div>\r\n            <div className=\"col-2\">\r\n                <ul>\r\n                    <li><a href=\"/actus/\">Actualit√©</a></li>\r\n                </ul>\r\n            </div>\r\n            <SeparatorMenu />\r\n            <div className=\"col-4 title\">\r\n                <a href=\"/\">YannDub</a>\r\n            </div>\r\n            <SeparatorMenu />\r\n            <div className=\"col-2\">\r\n                <ul>\r\n                    <li><a href=\"/cv/\">CV</a></li>\r\n                    <li><a href=\"/projects/\">Projets</a></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"col-1\"></div>\r\n        </header>\r\n        )\r\n    }\r\n}","const jsonToMarkdown = (array) => {\r\n    return array.join(\"\\n\\n\");\r\n}\r\n\r\nexport default jsonToMarkdown;","import React from 'react'\r\nimport './Panel.css'\r\n\r\nexport default class Panel extends React.Component {\r\n    render() {\r\n        return ( \r\n        <div className=\"panel\">\r\n            <div className=\"row row-title\">\r\n                <h1 className=\"panel-title\">{this.props.title}</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"panel-content\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport ReackMarkdown from \"react-markdown\";\r\n\r\nimport jsonToMarkdown from '../utils/jsonToMarkdown';\r\nimport '../App.css';\r\nimport Panel from \"../components/Panel\";\r\n\r\nimport index from '../resources/posts/home/index.json'\r\n\r\nexport default class HomePage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\"></div>\r\n                    <div className=\"col-8\">\r\n                        <Panel title={index.title}>\r\n                            <ReackMarkdown source={jsonToMarkdown(index.text)}/>\r\n                        </Panel>\r\n                    </div>\r\n                    <div className=\"col-2\"></div>\r\n                </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Panel from '../components/Panel';\r\n\r\nexport default class ActuPage extends React.Component {\r\n    render() {\r\n        return <Panel title=\"To Do\">\r\n            Non disponible pour le moment\r\n        </Panel>\r\n    }\r\n}","import React from 'react'\r\nimport Panel from '../components/Panel';\r\n\r\nexport default class CVPage extends React.Component {\r\n    render() {\r\n        return <Panel title=\"To Do\">\r\n            Non disponible pour le moment\r\n        </Panel>\r\n    }\r\n}","import React from 'react'\r\nimport Panel from '../components/Panel';\r\n\r\nexport default class ProjectsPage extends React.Component {\r\n    render() {\r\n        return <Panel title=\"To Do\">\r\n            Non disponible pour le moment\r\n        </Panel>\r\n    }\r\n}","import React from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\n\nimport HeaderMenu from \"./components/HeaderMenu\"\nimport HomePage from \"./pages/HomePage\";\nimport ActuPage from './pages/ActuPage';\nimport CVPage from './pages/CVPage';\nimport ProjectsPage from './pages/ProjectsPage';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <HeaderMenu />\n\n          <Route path=\"/\" exact component={HomePage}/>\n          <Route path=\"/actus/\" exact component={ActuPage}/>\n          <Route path=\"/cv/\" exact component={CVPage}/>\n          <Route path=\"/projects/\" exact component={ProjectsPage}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n // This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n // To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n   export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n       window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n         if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n           // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n   function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                 // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                 // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n   function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n   export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n // If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}